generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = "***"
}

model Profile {
  id                Int                 @default(autoincrement()) @id
  socialId          String? 
  authType          AuthType? 
  
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id])
}   
    
model User {    
  id                Int                 @default(autoincrement()) @id
  phoneNumber       String?             @unique
  password          String?       
  name              String?       
  photoURL          String?    
  birthday          DateTime?       
  gender            Gender?       
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @default(now()) @updatedAt
  deletedAt         DateTime?
  lastSignedIn      DateTime?

  profile           Profile?
  totalCount        TotalCount?
  totalAccTime      TotalAccTime?

  workOuts          WorkOut[]
  missions          Mission[]
  achieves          Achieve[]
}

model Mission {
  id                Int                 @default(autoincrement()) @id
  title             String?  
  discription       String? 
  reward            String?
  startAt           DateTime?
  endAt             DateTime?

  winnerId          Int?                 @unique
  winner            User?                @relation(fields: [winnerId], references: [id])

  achieves          Achieve[]
  conditions        Condition[]
}

model WorkOut {
  id                Int                 @default(autoincrement()) @id
  name              String? 
  missionType       MissionType?
  reps              Int?
  time              Int?
  set               Int?
  rest              Int?
  createdAt         DateTime?           @default(now())
  updatedAt         DateTime?           @default(now()) @updatedAt
  deletedAt         DateTime?

  userId            Int?                 @unique
  user              User?                @relation(fields: [userId], references: [id])
}

model Achieve {
  id                Int                 @default(autoincrement()) @id
  percent           Int?
  
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id])
  missionId         Int                 @unique
  mission           Mission             @relation(fields: [missionId], references: [id])
}

model Condition {
  id                Int                 @default(autoincrement()) @id
  missionType       MissionType?
  value             Int?

  missions          Mission[]
}

model TotalCount {
  id                Int                 @default(autoincrement()) @id
  count             Int?  
  createdAt         DateTime?           @default(now())
  deletedAt         DateTime?

  userId            Int                 @unique 
  user              User                @relation(fields: [userId], references: [id])
}

model TotalAccTime {
  id                Int                 @default(autoincrement()) @id
  accTime           Int?
  createdAt         DateTime?           @default(now())
  deletedAt         DateTime?

  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id])
}

enum Gender {
  male
  female
}

enum AuthType {
  email
  google
  apple
}

enum MissionType {
  tabata
  static
  setreps
  maxreps
  workOutTime
  totalCount
  totalAccTime
}
